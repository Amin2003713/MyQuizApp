@page "/Admins/Categories/ManageCategories"

@using Blazorise
@using Bit.BlazorUI
@using MyQuizApp.Infra.Categories
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyQuizApp.Domain.Categories
@using MyQuizApp.Shared.Components.Admins.Categories.Common.Modal
@using MyQuizApp.WebApi.Services
@using MyQuizApp.Shared.Components.Common.Modal
<h3>ManageCategories</h3>


<div>@Errors</div>


<QuickGrid Items="Categories" Virtualize >
    <PropertyColumn Property="@(p => p.Id)" Sortable="true"/>
    <PropertyColumn Property="@(p => p.Name)"  Sortable="true"/>
        <TemplateColumn Context="item" Title="Actions">
            <button @onclick="() => Edit(item.Id)">Edit</button>
            <button @onclick="() => Delete(item.Id)">Delete</button>
        </TemplateColumn>
</QuickGrid>

<!-- Add Category Button -->             
<hr>
<Button Color="Color.Primary" @onclick="AddCategory">Add New Category</Button>   

<hr>


<AddCategory Title="Edit Category" IsVisible="IsVisibleAdd" OnConfirmOrCancel="CallbackAdd" CategoryName=""/>
<AddCategory Title="Edit Category" IsVisible="IsVisibleEdit" OnConfirmOrCancel="CallbackEdit" CategoryName="@CategoryName" Id="EditId"/>
<Conferm LoadModel="OnInitializedAsync" @ref="DeleteModal" IsVisible="IsVisibleDelete" />
    

@code {
    private IQueryable<CategoryDto>? Categories { get; set; } 
    private string Errors { get; set; }
    private string CategoryName { get; set; }
    private bool IsVisibleAdd { get; set; } = false;
    private bool IsVisibleEdit { get; set; } = false;
    private bool IsVisibleDelete { get; set; } = false;
    public Guid? EditId { get; set; }
    public Conferm? DeleteModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Guid.CreateVersion7());

        var result =await CategoryApi.GetAllCategoriesAsync();
        if (result.IsSuccess)
            Categories = result.Data.AsQueryable();
        else
            Errors = result.Error;
    }


    private void Edit(Guid id)
    {
        IsVisibleEdit = !IsVisibleEdit;
        CategoryName = Categories!.FirstOrDefault(a=>a.Id == id)!.Name;
        EditId = id;
    }

    private void Delete(Guid id)
    {
        DeleteModal!.Category = Categories!.FirstOrDefault(a => a.Id == id)!;
        IsVisibleDelete = !IsVisibleDelete;
    }

    private void AddCategory()
    {
        IsVisibleAdd = !IsVisibleAdd;
    }

    private async Task CallbackAdd((bool toggle, string name, Guid? Id) obj)
    {
        if (obj.toggle)
        {
            var category = new CreateCategoryDto(obj.name);

            var result =await CategoryApi.CreateCategoryAsync(category);

            if(!result.IsSuccess)
                return;

            await OnInitializedAsync();
            StateHasChanged();
        }

        IsVisibleAdd = !IsVisibleAdd;
    }
    private async Task CallbackEdit((bool toggle, string name, Guid? Id) obj)
    {
        if (obj.toggle && obj.Id != Guid.Empty)
        {
            var updateDto = new UpdateCategoryDto(obj.name);
            var result =await CategoryApi.UpdateCategoryAsync( obj.Id.Value , updateDto);

            if(!result.IsSuccess)
                return;

            await OnInitializedAsync();
            StateHasChanged();
        }

        IsVisibleEdit = !IsVisibleEdit;
    }

}