@page "/Admins/Categories/ManageCategories"

@using MyQuizApp.Shared.Components.Common.Dialogs.Common
@using MyQuizApp.Shared.Components.Common.Dialogs.Confirmations
@using MyQuizApp.Shared.Components.Common.Dialogs.Edits
@using MyQuizApp.WebApi.Services
@using Color = MudBlazor.Color
<h3>ManageCategories</h3>


<div>@Errors</div>


<MudTable Items="Categories" Virtualize="true" SortLabel="Sort By" Hover>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="@(new Func<CategoryDto, object>(x => x.Id))">ID</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="@(new Func<CategoryDto, object>(x => x.Name))">Name</MudTableSortLabel>
        </MudTh>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDialog">
            Add Category
        </MudButton>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => EditDialog(context)">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteDialog(context)">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>







@code {
    private IQueryable<CategoryDto>? Categories { get; set; }
    private string Errors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Guid.CreateVersion7());

        var result = await CategoryApi.GetAllCategoriesAsync();
        if (result.IsSuccess)
            Categories = result.Data.AsQueryable();
        else
            Errors = result.Error;
    }


    private async Task DeleteDialog(CategoryDto dto)
    {
        var parameters = new DialogParameters
        {
            { "Message", $"Do you want to delete subject {dto.Name}?" }
        };

        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog  = await DialogService.ShowAsync<ConfirmDialog<ModalResult<Guid>>>("Confirm Action", parameters, options);

        if (dialog.Result.IsCanceled) return;

        if (dialog.Result.Result!.Data! is not ModalResult<Guid> { IsSuccess: true } modalResult)
            return;

        if (modalResult.Data == Guid.Empty)
            return;


        var result = await CategoryApi.DeleteCategoryAsync(modalResult.Data);
        if (!result.IsSuccess)
        {
            Errors = result.Error;
            return;
        }

        await OnInitializedAsync();
    }


    private async Task EditDialog(CategoryDto context)
    {
        var updatedCategory = new UpdateCategoryDto(context.Name);
        var parameters = new DialogParameters
        {
            { "Title", "Edit Category" }, { "Modal", updatedCategory },
            {
                "Content", (RenderFragment)(builder =>
                                            {
                                                builder.OpenComponent<MudTextField<string>>(0);
                                                builder.AddAttribute(1, "Label",        "Category Name");
                                                builder.AddAttribute(2, "Value",        updatedCategory.Name);
                                                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<string>(this, value => updatedCategory = new UpdateCategoryDto(value)));
                                                builder.CloseComponent();
                                            })
            }
        };

        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog  = await DialogService.ShowAsync<EditDialog<UpdateCategoryDto>>("Edit Category Dialog", parameters, options);

        var result = await dialog.Result; // Await dialog result to handle success/cancel logic if necessary


        if (result!.Data! is not ModalResult<UpdateCategoryDto> { IsSuccess: true } modalResult)
            return;

        if (!modalResult.IsSuccess)
            return;

        var apiResult = await CategoryApi.UpdateCategoryAsync(context.Id, modalResult.Data);

        if (!apiResult.IsSuccess)
            Snackbar.Add("Error in server", Severity.Error);

        await OnInitializedAsync();
        StateHasChanged();
        Snackbar.Add("All is Good", Severity.Success);
    }


    private async Task AddDialog()
    {
        var updatedCategory = new CreateCategoryDto(null);
        var parameters = new DialogParameters
        {
            { "Title", "New Category" }, { "Modal", updatedCategory },
            {
                "Content", (RenderFragment)(builder =>
                                            {
                                                builder.OpenComponent<MudTextField<string>>(0);
                                                builder.AddAttribute(1, "Label",        "Category Name");
                                                builder.AddAttribute(2, "Value",        updatedCategory.Name);
                                                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<string>(this, value => updatedCategory = new CreateCategoryDto(value)));
                                                builder.CloseComponent();
                                            })
            }
        };

        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog  = await DialogService.ShowAsync<EditDialog<CreateCategoryDto>>("Edit Category Dialog", parameters, options);

        var result = await dialog.Result; // Await dialog result to handle success/cancel logic if necessary


        if (result!.Data! is not ModalResult<CreateCategoryDto> { IsSuccess: true } modalResult)
            return;

        if (!modalResult.IsSuccess)
            return;

        var apiResult = await CategoryApi.CreateCategoryAsync(modalResult.Data);

        if (!apiResult.IsSuccess)
            Snackbar.Add("Error in server", Severity.Error);

        await OnInitializedAsync();
        StateHasChanged();
        Snackbar.Add("All is Good", Severity.Success);
    }


}