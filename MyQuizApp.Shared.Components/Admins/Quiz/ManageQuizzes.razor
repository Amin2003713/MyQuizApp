@page "/Admins/Quiz/ManageQuizzes"
@using MyQuizApp.Infra.Quiezzes
@using MyQuizApp.Domain.Quizzes
@using Microsoft.AspNetCore.Components.Routing
@inject IQuizApi QuizApi

<h1>Quiz List</h1>

<MudProgressCircular Indeterminate="true" Visible="IsLoading"/>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
}
else if (Quizzes != null && Quizzes.Any())
{
    <MudTable Items="Quizzes" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Quiz Name</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Quiz Name">@context.Name</MudTd>
            <MudTd DataLabel="Category">@context.Category.Name</MudTd>
            <MudTd DataLabel="Actions">
                @* <MudButton Link="true" Color="Color.Info" Href="/quizzes/details/@context.Id" Size="Size.Small"> *@
                @*     Details *@
                @* </MudButton> *@
                @* <MudButton Link="true" Color="Color.Warning" Href="/quizzes/edit/@context.Id" Size="Size.Small">Edit *@
                @* </MudButton> *@
                @* <MudButton Color="Color.Error" OnClick="() => DeleteQuiz(context.Id)" Size="Size.Small">Delete *@
                @* </MudButton> *@
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText>No quizzes available.</MudText>
}

<MudButton Color="Color.Primary" Variant="Variant.Filled">
    <NavLink class="text-white" href="/Admins/Quiz/AddQuizzes">Add Quiz</NavLink>
</MudButton>

@code {
    private IQueryable<Quiz> Quizzes { get; set; } = default!;
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await QuizApi.GetAllQuizzesAsync();
            if (response.IsSuccess)
            {
                Quizzes = response.Data.AsQueryable();
            }
            else
            {
                ErrorMessage = response.Error;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task DeleteQuiz(Guid quizId)
    {
        var response = await QuizApi.DeleteQuizAsync(quizId);
        if (response.IsSuccess)
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
        else
        {
            ErrorMessage = response.Error;
        }
    }
}
