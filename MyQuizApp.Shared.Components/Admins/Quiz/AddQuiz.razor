@page "/Admins/Quiz/AddQuizzes"
@using MyQuizApp.Domain.Quizzes
@inject NavigationManager Navigation

<MudPaper Class="p-4" Elevation="4">
    <MudText Typo="Typo.h6">Create New Quiz</MudText>

    <MudForm @ref="quizForm" Model="quiz" Validate="true">
        <MudTextField Label="Quiz Name" @bind-Value="quiz.Name" For="@(() => quiz.Name)" Required="true"/>
        <MudDatePicker Label="Created On"  @bind-Date="quiz.CreatedOn" For="@(() => quiz.CreatedOn)" Required="true"/>
        <MudTimePicker Label="Duration" @bind-TimeSpan="quiz.Duration" Required="true"/>
        <MudSelect T="Guid" Label="Category" @bind-Value="quiz.CategoryId" Required="true">
                @if (Categories?.Any() == true)
                {
                    @foreach (var category in Categories)
                    {
                        <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                    }
                }
                else
                {
                    <MudSelectItem Value="Guid.Empty" Disabled="true">Loading categories...</MudSelectItem>
                }
        </MudSelect>

        <MudTextField Label="Question Count" @bind-Value="quiz.QuestionCount" For="@(() => quiz.QuestionCount)"
                      Min="1" Max="1000" Required="true"/>

        <MudButton OnClick="AddQuestions" Color="Color.Primary" Class="mt-3">Add Questions</MudButton>

        <MudGrid>
            @foreach (var question in quiz.Questions)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="my-2">
                        <MudCardContent>
                            <!-- Question Text Field -->
                            <MudTextField Label="Question" @bind-Value="question.Text"
                                          Required="true" For="@(() => question.Text)"/>

                            <!-- Options Grid -->
                            <MudGrid>
                                @foreach (var option in question.Options)
                                {
                                    <MudItem xs="6">
                                        <MudTextField Label="Option" @bind-Value="option.Text"
                                                      Required="true" For="@(() => option.Text)"/>
                                        <MudCheckBox @bind-Value="option.IsCorrectAnswer"
                                                     Label="Correct Answer"/>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <MudButton OnClick="SaveQuiz" Color="Color.Success" Class="mt-3">Save Quiz</MudButton>
    </MudForm>
</MudPaper>

@code {

    private List<CategoryDto> Categories;

    private Quiz quiz = new Quiz
    {
        QuestionCount = 10, Questions = new List<Question>(10)
    };

    private MudForm quizForm;


    protected override async Task OnInitializedAsync()
    {
        var result = await CategoryApi.GetAllCategoriesAsync();

        if (!result.IsSuccess)
            return;

        Categories = (result).Data.ToList();
    }

    private void AddQuestions()
    {
        // Add default questions if not already added
        for (int i = quiz.Questions.Count; i < quiz.QuestionCount; i++)
        {
            quiz.Questions.Add(
                new Question
                {
                    Text = string.Empty, Options = new List<Option>
                    {
                        new Option { Text = string.Empty }, new Option { Text = string.Empty }
                }
            });
        }
    }

    private async Task SaveQuiz()
    {
        if (quizForm.IsValid)
        {
            var result =await QuizApi.CreateQuizAsync(quiz);
            if(result.IsSuccess)
            {
                Navigation.NavigateTo("/quiz-list");
                Snackbar.Add("Success", Severity.Success);
            }

            Snackbar.Add("Failed", Severity.Error);
            await quizForm.ResetAsync();
        }

        var a  = quizForm.Errors;
    }
}
