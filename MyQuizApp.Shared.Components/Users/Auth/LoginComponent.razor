@using MudBlazor

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center min-h-100vh">
    <MudCard Class="p-4" Style="width: 100%;">
        <MudCardHeader>
            <MudIcon class="text-center" Icon="@Icons.Material.Rounded.Login">Login</MudIcon>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="Requests" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>
                <MudTextField T="string" Label="Email" @bind-Value="Requests.Email" For="() => Requests.Email" Required="true" Immediate="true"/>
                <MudTextField T="string" Label="Password" For="() => Requests.Password" @bind-Value="Requests.Password" InputType="InputType.Password"
                              Required="true" Immediate="true"/>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" FullWidth="true" Class="mt-2">
                    Login
                </MudButton>
            </EditForm>
        </MudCardContent>
        @if (Errors is not null)
        {
            <MudAlert Severity="Severity.Error" Class="mt-2">@Errors</MudAlert>
        }
    </MudCard> 
    <MudCardActions>
        <MudButton Href="/StudentRegister" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Create">Register</MudButton>
    </MudCardActions>
</MudContainer>



@code{
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginRequests Requests { get; set; } = new LoginRequests();
    [Parameter]public string? Errors { get; set; } = null!;

    [Parameter] public EventCallback<LoginRequests> Callback { get; set; }


    private async Task LoginAsync(EditContext arg)
    {
        if (Requests is not null)
            await Callback.InvokeAsync(Requests);
        else
            Errors = "Fill pls ";
    }

}