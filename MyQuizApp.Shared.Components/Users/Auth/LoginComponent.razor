@page "/Login"
@using MyQuizApp.Shared.Components.Layout
@using MyQuizApp.Shared.Components.Users.Auth
@layout AuthLayout

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center min-h-100vh">
    <MudCard Class="p-4" Style="width: 100%;">
        <MudCardHeader>
            <MudIcon class="text-center" Icon="@Icons.Material.Rounded.Login">Login</MudIcon>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="Requests" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>
                <MudTextField T="string" Label="Email" @bind-Value="Requests.Email" For="() => Requests.Email" Required="true" Immediate="true"/>
                <MudTextField T="string" Label="Password" For="() => Requests.Password" @bind-Value="Requests.Password" InputType="InputType.Password"
                              Required="true" Immediate="true"/>

                <MudGrid>
                    <MudItem lg="6" md="6" sm="12" xl="6" xs="12" xxl="6">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit"
                                   FullWidth="true" Class="mt-2">
                            Login
                        </MudButton>
                    </MudItem>
                    
                    <MudItem lg="6" md="6" sm="12" xl="6" xs="12" xxl="6">
                        <MudButton Href="/StudentRegister" Color="Color.Primary" Variant="Variant.Text" Ripple
                                   StartIcon="@Icons.Material.TwoTone.Create">Register
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
        @if (Errors is not null)
        {
            <MudAlert Severity="Severity.Error" Class="mt-2">@Errors</MudAlert>
        }
    </MudCard> 
</MudContainer>



@code{
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginRequests Requests { get; set; } = new LoginRequests();
    private string Errors { get; set; } = null!;


    protected override void OnInitialized()
    {
        if (AuthState.IsLoggedIn)
            NavigationManager.NavigateTo("/", replace: true, forceLoad: true);
    }

    private async Task LoginAsync(EditContext arg)
    {
        var result = await AuthState.LoginAsync(Requests);

        if (result.HasError)
        {
            Errors = result.Error ?? "";
            StateHasChanged();
            return;
        }

        NavigationManager.NavigateTo("/");
    }

}